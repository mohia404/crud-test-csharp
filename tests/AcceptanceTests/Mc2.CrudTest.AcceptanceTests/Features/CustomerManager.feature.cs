// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Customer Manager")]
    public partial class CustomerManagerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CustomerManager.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customer Manager", "As a an operator I wish to be able to Create, Update, Delete customers and list a" +
                    "ll customers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator creates valid customer")]
        [NUnit.Framework.CategoryAttribute("create")]
        public virtual void OperatorCreatesValidCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator creates valid customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table1.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table1.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table1.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 7
 testRunner.Given("the following customers", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table2.AddRow(new string[] {
                            "mohammadamin",
                            "amini",
                            "1998/05/22",
                            "+989158955563",
                            "mohia1377@gmail.com",
                            "123456789123456789123459"});
#line 12
 testRunner.When("i try to create customer", ((string)(null)), table2, "When ");
#line hidden
#line 15
 testRunner.And("i try to get customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table3.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table3.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table3.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
                table3.AddRow(new string[] {
                            "mohammadamin",
                            "amini",
                            "1998/05/22",
                            "+989158955563",
                            "mohia1377@gmail.com",
                            "123456789123456789123459"});
#line 16
 testRunner.Then("i should get following customers", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator creates customer with invalid phone number")]
        [NUnit.Framework.CategoryAttribute("create")]
        public virtual void OperatorCreatesCustomerWithInvalidPhoneNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator creates customer with invalid phone number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table4.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table4.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table4.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 24
 testRunner.Given("the following customers", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table5.AddRow(new string[] {
                            "mohammadamin",
                            "amini",
                            "1998/05/22",
                            "+98915895556",
                            "mohia1377@gmail.com",
                            "123456789123456789123459"});
#line 29
 testRunner.When("i try to create customer", ((string)(null)), table5, "When ");
#line hidden
#line 32
 testRunner.Then("i should get invalid phone number error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator creates customer with existing first name, last name and date of birth")]
        [NUnit.Framework.CategoryAttribute("create")]
        public virtual void OperatorCreatesCustomerWithExistingFirstNameLastNameAndDateOfBirth()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator creates customer with existing first name, last name and date of birth", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table6.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table6.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table6.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 36
 testRunner.Given("the following customers", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table7.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1377@gmail.com",
                            "52345678"});
#line 41
 testRunner.When("i try to create customer", ((string)(null)), table7, "When ");
#line hidden
#line 44
 testRunner.Then("i should get customer exists error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator creates customer with existing email")]
        [NUnit.Framework.CategoryAttribute("create")]
        public virtual void OperatorCreatesCustomerWithExistingEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator creates customer with existing email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table8.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table8.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table8.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 48
 testRunner.Given("the following customers", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table9.AddRow(new string[] {
                            "mohammad",
                            "mohammadamini",
                            "1995/05/22",
                            "+989158955567",
                            "mohia1374@gmail.com",
                            "123456789123456789123450"});
#line 53
 testRunner.When("i try to create customer", ((string)(null)), table9, "When ");
#line hidden
#line 56
 testRunner.Then("i should get email exists error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator delete customer that exists")]
        [NUnit.Framework.CategoryAttribute("delete")]
        public virtual void OperatorDeleteCustomerThatExists()
        {
            string[] tagsOfScenario = new string[] {
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator delete customer that exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table10.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table10.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table10.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 60
 testRunner.Given("the following customers", ((string)(null)), table10, "Given ");
#line hidden
#line 65
 testRunner.When("i try to delete customer with email \'mohia1374@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.And("i try to get customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table11.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table11.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 67
 testRunner.Then("i should get following customers", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator delete customer that do not exists")]
        [NUnit.Framework.CategoryAttribute("delete")]
        public virtual void OperatorDeleteCustomerThatDoNotExists()
        {
            string[] tagsOfScenario = new string[] {
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator delete customer that do not exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table12.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table12.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table12.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 74
 testRunner.Given("the following customers", ((string)(null)), table12, "Given ");
#line hidden
#line 79
 testRunner.When("i try to delete customer with email \'mohia1377@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("i should get customer do not exist error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator get customers")]
        [NUnit.Framework.CategoryAttribute("read")]
        public virtual void OperatorGetCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator get customers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table13.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table13.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table13.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 84
 testRunner.Given("the following customers", ((string)(null)), table13, "Given ");
#line hidden
#line 89
 testRunner.When("i try to get customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table14.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table14.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table14.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 90
 testRunner.Then("i should get following customers", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator get existing customer")]
        [NUnit.Framework.CategoryAttribute("read")]
        public virtual void OperatorGetExistingCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator get existing customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table15.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table15.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table15.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 98
 testRunner.Given("the following customers", ((string)(null)), table15, "Given ");
#line hidden
#line 103
 testRunner.When("i try to get customer with email \'mohia1374@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table16.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
#line 104
 testRunner.Then("i should get following customer", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Operator update existing customer")]
        [NUnit.Framework.CategoryAttribute("update")]
        public virtual void OperatorUpdateExistingCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Operator update existing customer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table17.AddRow(new string[] {
                            "mohammad",
                            "amini",
                            "1995/05/22",
                            "+989158955560",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table17.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table17.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 110
 testRunner.Given("the following customers", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table18.AddRow(new string[] {
                            "hasan",
                            "hasani",
                            "1995/05/22",
                            "+989158955569",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
#line 115
 testRunner.When("i try to update following customer with email \'mohia1374@gmail.com\'", ((string)(null)), table18, "When ");
#line hidden
#line 118
 testRunner.And("i try to get customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "first_name",
                            "last_name",
                            "date_of_birth",
                            "phone_number",
                            "email",
                            "bank_account_number"});
                table19.AddRow(new string[] {
                            "hasan",
                            "hasani",
                            "1995/05/22",
                            "+989158955569",
                            "mohia1374@gmail.com",
                            "123456789123456789123456"});
                table19.AddRow(new string[] {
                            "amin",
                            "mohammadi",
                            "1996/05/22",
                            "+989158955561",
                            "mohia1375@gmail.com",
                            "123456789123456789123457"});
                table19.AddRow(new string[] {
                            "mohammadamin",
                            "mohammadi",
                            "1997/05/22",
                            "+989158955562",
                            "mohia1376@gmail.com",
                            "123456789123456789123458"});
#line 119
 testRunner.Then("i should get following customers", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
